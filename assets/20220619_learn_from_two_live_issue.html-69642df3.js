import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as l,a as r,f as p}from"./app-a47e0b23.js";const d={},t=r("p",null,"连续两周的周五都有紧急线上事故，都是发布版本导致的。不是我写出的问题但有点相关，作为协助者直接参与了这两次线上事故的应对、问题定位与处理。也正是协助者的视角，让我得以从旁观察大家在遭遇突发线上事故时的反应和举措，从别人的行动中学习",-1),h=p('<h3 id="事故处理过程" tabindex="-1"><a class="header-anchor" href="#事故处理过程" aria-hidden="true">#</a> 事故处理过程</h3><p>一般线上事故的出现与应对，都有着以下基本过程</p><h4 id="问题的反馈与信息同步" tabindex="-1"><a class="header-anchor" href="#问题的反馈与信息同步" aria-hidden="true">#</a> 问题的反馈与信息同步</h4><p>这两次都是业务方反馈的问题</p><p>等到业务反馈基本大面积出现问题，已经造成一定影响了。这个时候我们开发最直接的感知，就是业务一直在群里问进展，问恢复时间。其实业务方应该还在做一个事情，就是处理用户客诉，安抚用户情绪，只是过程对开发不可见</p><p>目前团队的新处理流程里，有专门的支持组，负责响应线上问题并拉群跟进处理。他们的职责，是作为沟通的桥梁，及时给相关方同步最新的进展，推动问题的解决。恰好两次事故，第一次没有，第二次有，从而对比出了差异</p><p>一开始我还不理解为什么需要专门的组做这个事情，开发不也能干嘛？但在过程中发现，一线开发关注的焦点，还是在问题本身，往往碰到一个问题，就吭哧吭哧地进入排查状态。对于是否要及时给外部同步最新进展，一方面不一定有这个精力，另一方面可能也没有这个意识。有时候还会等到确定原因和方案再上报，等leader评估完，再继续上报，每一层都在试图过滤这个问题，纠结是否在当下就要上报</p><p>在上周的事故中，问题还在内部消化，没有专人对外同步进展，大家都着眼于解决当前的问题。这其实对业务并不友好，业务自然是很关心问题什么时候能被修复，而如果一直没有回应，可能误以为没有人跟进。同时每一个刚得知消息的上级可能都会来问几句，每次来一个开发都得分散精力去解释，无法全情投入问题当中</p><p>有了支持组之后，就释放了开发在信息同步方面上的内耗，一线开发可以专注于问题本身。而现在我也觉得信息就应该及时同步出去，因为是否要介入的选择权不应该在我们手上，而在领导手上，在相关方手上，他们在知道消息之后，可以选择直接介入，也可以选择等待最新进展</p><h4 id="问题的跟进与解决" tabindex="-1"><a class="header-anchor" href="#问题的跟进与解决" aria-hidden="true">#</a> 问题的跟进与解决</h4><p>一旦周知到各方，影响较大的问题就会直接把大家拉到会议室里，作为War Room，商量问题的根因和修复方案</p><p>如果是自己写出的bug，压力还是蛮大的。各方都在追问</p><ul><li>什么问题</li><li>找到原因了吗</li><li>解决方案是什么</li><li>影响面多大</li><li>怎么止损</li><li>……</li></ul><p>还没开始看逻辑，各种问题扑面而来，似乎一旦发生问题，你就得马上有对策等等，思考一下都会觉得你处理速度慢。在这个环境下，其实是不利于问题的的定位的，本来出问题的时候内心就紧张了，再加上不断的打扰，对效率是有点影响，而且脑子还不一定保持清醒</p><p>这个时候有个能抗压的leader非常重要，这里必须给现leader点个赞，两次出问题都直接扛起大旗，在定位过程中提出有效问题，一步步推动问题的定位与修复。在讨论过程中还发现，有的领导强到，明明没有直接参与技术方案的讨论和代码的编写，只是听我们的叙述就能理解问题，并且还能提出原先实现的不合理以及快速给出修复方案（而我在听写bug的同学叙述逻辑时都迷糊了，还没反应过来</p><p>过去我一直以为，要修复问题，就一定得对症下药，只有找出根本的逻辑漏洞，才能解决问题。但是这两次事故让我意识到，降低影响才是首要思考的，这都不需要准确找到根本原因，例如这周的事故就是代码逻辑出现问题导致循环发送消息事件造成积压，缓和的方案就是扩容，增加消费的速率，然后再找出问题的代码逻辑。上周的事故就是先暂停某些业务操作，然后等数据修复完成再启用</p><p>因为如果定位根因是耗时操作，那么时间拖得越久，影响就会越大，当务之急是降低影响面，先缓和问题，再试图解决问题。</p><p>在问题的讨论过程中让我意识到，搞技术的还真不能只关注技术，还需要</p><ul><li>紧急时刻具备强大的心理素质</li><li>排除“无关噪音”快速理解问题</li><li>思路保持清晰并能准确表达</li></ul><h4 id="问题的复盘" tabindex="-1"><a class="header-anchor" href="#问题的复盘" aria-hidden="true">#</a> 问题的复盘</h4><p>事故过程的焦点是处理问题，等到问题修复之后，就需要事故复盘</p><p>首先是整理复盘资料</p><ul><li>描述事故本身和影响面</li><li>事故处理的时间线，什么时候发生的，什么时间节点做了什么操作有啥变化。</li><li>事故发生的原因是什么，如何避免问题再次发生</li><li>事故处理过程有哪里还可以改进</li><li>后续的改进措施，落实到人和时间</li></ul><p>然后就是开会，把相关人员拉齐，针对事故进行一次讨论，并做好总结</p><h3 id="在事上练" tabindex="-1"><a class="header-anchor" href="#在事上练" aria-hidden="true">#</a> 在事上练</h3><p>以上构成我对事故处理的基本认知，其实更多的还是需要具体问题具体分析。而且写太多的文字，都不如在事儿上练，紧迫感只有身临其境才能有所体会。</p><p>美国真实事件改编的电影《萨利机长》，讲述了一次飞机遇鸟撞击然后紧急迫降河面上的故事。里面的听证会情节中，有事故的模拟，模拟人员练习了数十次，变成了没有感情的机器，就是为了证明其实不需要迫降到河面上，置乘客于危险之中，但是机长反驳，需要考虑危急时刻反应的时间，在加上了一段时间的延迟之后再模拟，无论怎么尝试，都无法安全着陆。</p><p>而且针对这次飞机事故，如果换一个机长，可能就是不同的结果。虽然是不同的领域，但突发事件的应对，我觉得都是类似的，无非是问题不同了</p><p>确实</p><ul><li>我们可以模拟多次演练，但永远模拟不了紧迫感</li><li>我们可以在每次事故中汲取经验，但下一次问题的发生，永远都是第一次</li></ul>',30);function o(n,s){return i(),a("div",null,[t,l("more"),h])}const u=e(d,[["render",o],["__file","20220619_learn_from_two_live_issue.html.vue"]]);export{u as default};
